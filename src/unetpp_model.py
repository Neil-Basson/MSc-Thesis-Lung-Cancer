# -*- coding: utf-8 -*-
"""UNetPP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qbsYBAxsY5ap45_uoFbzmNWcGCIpzCZw
"""

import torch
import torch.nn as nn
from .unet_utils import DoubleConv, OutConv  # assuming these are already available

class UNetPP(nn.Module):
    def __init__(self, n_channels=1, n_classes=1, deep_supervision=False):
        super(UNetPP, self).__init__()
        self.deep_supervision = deep_supervision
        filters = [64, 128, 256, 512, 1024]

        # Encoder
        self.conv0_0 = DoubleConv(n_channels, filters[0])
        self.conv1_0 = DoubleConv(filters[0], filters[1])
        self.conv2_0 = DoubleConv(filters[1], filters[2])
        self.conv3_0 = DoubleConv(filters[2], filters[3])
        self.conv4_0 = DoubleConv(filters[3], filters[4])

        # Nested decoder
        self.conv0_1 = DoubleConv(filters[0]+filters[1], filters[0])
        self.conv1_1 = DoubleConv(filters[1]+filters[2], filters[1])
        self.conv2_1 = DoubleConv(filters[2]+filters[3], filters[2])
        self.conv3_1 = DoubleConv(filters[3]+filters[4], filters[3])

        self.conv0_2 = DoubleConv(filters[0]*2+filters[1], filters[0])
        self.conv1_2 = DoubleConv(filters[1]*2+filters[2], filters[1])
        self.conv2_2 = DoubleConv(filters[2]*2+filters[3], filters[2])

        self.conv0_3 = DoubleConv(filters[0]*3+filters[1], filters[0])
        self.conv1_3 = DoubleConv(filters[1]*3+filters[2], filters[1])

        self.conv0_4 = DoubleConv(filters[0]*4+filters[1], filters[0])

        self.final = OutConv(filters[0], n_classes)

        self.maxpool = nn.MaxPool2d(2)
        self.upsample = lambda x: nn.functional.interpolate(x, scale_factor=2, mode='bilinear', align_corners=True)

    def forward(self, x):
        x0_0 = self.conv0_0(x)
        x1_0 = self.conv1_0(self.maxpool(x0_0))
        x0_1 = self.conv0_1(torch.cat([x0_0, self.upsample(x1_0)], 1))

        x2_0 = self.conv2_0(self.maxpool(x1_0))
        x1_1 = self.conv1_1(torch.cat([x1_0, self.upsample(x2_0)], 1))
        x0_2 = self.conv0_2(torch.cat([x0_0, x0_1, self.upsample(x1_1)], 1))

        x3_0 = self.conv3_0(self.maxpool(x2_0))
        x2_1 = self.conv2_1(torch.cat([x2_0, self.upsample(x3_0)], 1))
        x1_2 = self.conv1_2(torch.cat([x1_0, x1_1, self.upsample(x2_1)], 1))
        x0_3 = self.conv0_3(torch.cat([x0_0, x0_1, x0_2, self.upsample(x1_2)], 1))

        x4_0 = self.conv4_0(self.maxpool(x3_0))
        x3_1 = self.conv3_1(torch.cat([x3_0, self.upsample(x4_0)], 1))
        x2_2 = self.conv2_2(torch.cat([x2_0, x2_1, self.upsample(x3_1)], 1))
        x1_3 = self.conv1_3(torch.cat([x1_0, x1_1, x1_2, self.upsample(x2_2)], 1))
        x0_4 = self.conv0_4(torch.cat([x0_0, x0_1, x0_2, x0_3, self.upsample(x1_3)], 1))

        out = self.final(x0_4)
        return out